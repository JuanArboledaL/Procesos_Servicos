/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package confidencialidad_identidad;

import static confidencialidad_identidad.ClavesManager.generarClaves;
import static confidencialidad_identidad.ClavesManager.guardarClaves;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.InvalidKeySpecException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Juanito
 */
public class interfaz extends javax.swing.JFrame {

    /**
     * Creates new form interfaz
     */
    public interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cifrar = new javax.swing.JButton();
        firmar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        archivo = new javax.swing.JButton();
        rutafichero = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        validar = new javax.swing.JButton();
        descifrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(161, 179, 196));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Confidencialidad e Identidad");

        cifrar.setText("Cifrar");
        cifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cifrarActionPerformed(evt);
            }
        });

        firmar.setText("Firmar");
        firmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firmarActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Elija un documento el cual primero deber치 de cifrar y luego firmar");

        archivo.setText("Selecciona un Archivo");
        archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archivoActionPerformed(evt);
            }
        });

        rutafichero.setEditable(false);

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("A continuaci칩n se validar치 la confidencialidad de dicho documento y ademas se descifrar치");

        validar.setText("Validar");
        validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validarActionPerformed(evt);
            }
        });

        descifrar.setText("Descifrar");
        descifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descifrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rutafichero)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(35, 35, 35)
                                .addComponent(archivo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel3))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(descifrar, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(validar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(firmar, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(cifrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(archivo))
                .addGap(12, 12, 12)
                .addComponent(rutafichero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cifrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(firmar)
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(validar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descifrar)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String direccion, direccion2;
    private static String MENSAJE;
    static ClavesManager claveEmisor = new ClavesManager();
    static ClavesManager claveReceptor = new ClavesManager();
    static Cifrar_descifrar ci = new Cifrar_descifrar();
    private static byte[] firma;

    private static final String FICHERO_CLAVE_PUBLICA_EMISOR = "clave_publicaEmisor.key";
    private static final String FICHERO_CLAVE_PRIVADA_EMISOR = "clave_privadaEmisor.key";
    private static final String FICHERO_CLAVE_PUBLICA_RECEPTOR = "clave_publicaReceptor.key";
    private static final String FICHERO_CLAVE_PRIVADA_RECEPTOR = "clave_privadaReceptor.key";

    private void archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archivoActionPerformed
        // TODO add your handling code here:

        JFileChooser jf = new JFileChooser();
        jf.setCurrentDirectory(new File(System.getProperty("user.dir")));
        jf.showSaveDialog(null);
        direccion = jf.getSelectedFile().getAbsolutePath();
        rutafichero.setText(direccion);

        cifrar.setEnabled(true);

    }//GEN-LAST:event_archivoActionPerformed

    public String mensaje(String direc) {

        String mnsj = "";
        try {
            BufferedReader b = new BufferedReader(new FileReader(direc));
            StringBuilder men = new StringBuilder();
            String linea;

            while ((linea = b.readLine()) != null) {
                men.append(linea);
            }

            mnsj = men.toString();
            MENSAJE = mnsj;
            b.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }

        return mnsj;
    }
    private void cifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cifrarActionPerformed
        // TODO add your handling code here:

        PublicKey clavePrivada;
        File fichero = new File("datoscifrados.rsa");
        try {
            clavePrivada = claveEmisor.getClavePublica(FICHERO_CLAVE_PUBLICA_RECEPTOR);

            byte[] mensajeCifrado = ci.cifrarMensaje(mensaje(direccion), clavePrivada);
            Files.write(fichero.toPath(), mensajeCifrado);

            JOptionPane.showMessageDialog(this, "Fichero cifrado exitosamente", "Cifrado", JOptionPane.INFORMATION_MESSAGE);
            File file = new File("clave_publicaReceptor.key");
            file.delete();

        } catch (Exception e) {
            e.printStackTrace();
        }

        archivo.setEnabled(false);
        firmar.setEnabled(true);
        try {
            Thread.sleep(100);
            cifrar.setEnabled(false);
        } catch (InterruptedException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_cifrarActionPerformed

    private void firmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firmarActionPerformed
        // TODO add your handling code here:

        try {
            Signature signature = Signature.getInstance("SHA256withRSA");
            signature.initSign(claveEmisor.getClavePrivada(FICHERO_CLAVE_PRIVADA_EMISOR));
            signature.update(MENSAJE.getBytes());
            firma = signature.sign();

            JOptionPane.showMessageDialog(this, "Fichero Firmado con exitosamente", "Firma", JOptionPane.INFORMATION_MESSAGE);

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            Thread.sleep(100);
            firmar.setEnabled(false);
        } catch (InterruptedException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

        jLabel3.setEnabled(true);
        validar.setEnabled(true);

    }//GEN-LAST:event_firmarActionPerformed

    private void validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validarActionPerformed
        // TODO add your handling code here:

        JFileChooser jf = new JFileChooser();
        jf.setCurrentDirectory(new File(System.getProperty("user.dir")));
        jf.showSaveDialog(null);
        direccion2 = jf.getSelectedFile().getAbsolutePath();

        try {
            Signature signature = Signature.getInstance("SHA256withRSA");
            signature.initVerify(claveEmisor.getClavePublica(direccion2));
            signature.update(mensaje(direccion).getBytes());

            if (signature.verify(firma)) {

                JOptionPane.showMessageDialog(this, "Mensaje Verificado", "Verificacion", JOptionPane.INFORMATION_MESSAGE);
                try {
                    Thread.sleep(100);
                    validar.setEnabled(false);
                } catch (InterruptedException ex) {
                    Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
                descifrar.setEnabled(true);

            } else {

                JOptionPane.showMessageDialog(this, "Atenci칩n: el mensaje no es fiable", "Verificacion", JOptionPane.WARNING_MESSAGE);

            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            JOptionPane.showMessageDialog(this, "No se puede elegir la clave privada", "Verificacion", JOptionPane.WARNING_MESSAGE);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_validarActionPerformed

    private void descifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descifrarActionPerformed
        // TODO add your handling code here:

        PrivateKey clavePublica;
        File fichero = new File("datoscifrados.rsa");
        try {
            clavePublica = claveEmisor.getClavePrivada(FICHERO_CLAVE_PRIVADA_RECEPTOR);
            byte[] mensajeCifrado = Files.readAllBytes(fichero.toPath());
            byte[] mensajeDescifrado = ci.descifrar(mensajeCifrado, clavePublica);
            JOptionPane.showMessageDialog(this, new String(mensajeDescifrado, StandardCharsets.UTF_8), "Mensaje Descifrado", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            Thread.sleep(100);
            enabledbtns(false);
            rutafichero.setText("");
            archivo.setEnabled(true);

        } catch (InterruptedException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_descifrarActionPerformed

    public static void enabledbtns(boolean b) {

        cifrar.setEnabled(b);
        firmar.setEnabled(b);
        jLabel3.setEnabled(b);
        validar.setEnabled(b);
        descifrar.setEnabled(b);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);

                enabledbtns(false);
                try {
                    KeyPair claves = generarClaves();
                    claveEmisor.guardarClaves(claves, FICHERO_CLAVE_PUBLICA_EMISOR, FICHERO_CLAVE_PRIVADA_EMISOR);
                    claveReceptor.guardarClaves(claves, FICHERO_CLAVE_PUBLICA_RECEPTOR, FICHERO_CLAVE_PRIVADA_RECEPTOR);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton archivo;
    private static javax.swing.JButton cifrar;
    private static javax.swing.JButton descifrar;
    private static javax.swing.JButton firmar;
    private javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel2;
    private static javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField rutafichero;
    private static javax.swing.JButton validar;
    // End of variables declaration//GEN-END:variables
}
